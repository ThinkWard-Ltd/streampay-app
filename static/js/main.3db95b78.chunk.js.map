{"version":3,"sources":["constants/ids.js","constants/index.js","Components/Recipient.js","Components/SelectToken.js","Contexts/FormContext.js","Components/DateTime.js","Components/Amount.js","Components/Curtain.js","Components/Stream/Badge.js","Components/Stream/ActionButton.js","Components/Stream/Duration.js","Components/Stream/Progress.js","Components/Stream.js","Components/Footer.js","Components/Logo.js","Components/ButtonPrimary.js","Components/Link.js","Components/Address.js","Stores/BalanceStore.js","Contexts/NetworkContext.js","Stores/StreamsStore.js","Components/CreateStreamForm.js","Components/Account.js","Components/SelectCluster.js","Components/Banner.js","Components/EmptyStreams.js","Containers/StreamsContainer.js","Pages/Main.js","Pages/NotConnected.js","logo.png","App.js","index.js","Stores/NetworkStore.js","utils/helpers.js","Components/ToastrLink.js","Actions/sendTransaction.js","Actions/createStream.js","Actions/withdrawStream.js","Actions/cancelStream.js"],"names":["STREAMFLOW_ACCOUNT_ID","SOLLET_URL","AIRDROP_AMOUNT","TX_FINALITY_CONFIRMED","TX_FINALITY_FINALIZED","INSTRUCTION_CREATE_STREAM","INSTRUCTION_WITHDRAW_STREAM","INSTRUCTION_CANCEL_STREAM","EXPLORER_TYPE_ADDR","DATE_FORMAT","TIME_FORMAT","START","END","STREAM_STATUS_SCHEDULED","STREAM_STATUS_STREAMING","STREAM_STATUS_COMPLETE","STREAM_STATUS_CANCELED","STREAM_STATUS_COLOR","Recipient","props","className","htmlFor","type","name","id","defaultValue","value","onChange","e","target","pattern","placeholder","required","SelectToken","disabled","FormContext","createContext","undefined","FormProvider","now","Date","useState","amount","setAmount","receiver","setReceiver","format","startDate","setStartDate","startTime","setStartTime","endDate","setEndDate","endTime","setEndTime","Provider","children","useFormContext","useContext","DateTime","title","date","updateDate","time","updateTime","initializeTime","add","minutes","minEndDate","min","max","years","onFocus","onClick","Amount","step","autoFocus","Number","MAX_SAFE_INTEGER","Curtain","visible","Badge","color","fill","viewBox","cx","cy","r","ActionButton","action","Duration","fromUnixTime","start","end","memo","Progress","rtl","toFixed","style","width","Stream","data","withdrawn","sender","status","myAddress","removeStream","onStatusUpdate","onCancel","onWithdraw","getStreamed","streamed","setStreamed","available","setAvailable","showWithdraw","showCancel","useEffect","interval","setInterval","tmpStatus","getUnixTime","updateStatus","clearInterval","Link","url","getExplorerLink","Address","address","timestamp","Footer","src","alt","loading","hideIcon","Logo","ButtonPrimary","rest","icon","href","rel","iconClassName","copied","setCopied","copyToClipboard","setTimeout","useBalanceStore","create","set","balance","setBalance","NetworkContext","networkStore","state","clusterUrl","NetworkProvider","cluster","useNetworkStore","providerUrl","selectedWallet","setSelectedWallet","connected","setConnected","connection","useMemo","Connection","urlWallet","Wallet","useNetworkContext","useStreamStore","streams","localStorage","JSON","parse","setStreams","CreateStreamForm","setLoading","pda","Keypair","generate","validate","element","msg","toDateString","setCustomValidity","createStream","a","form","document","getElementById","elements","checkValidity","reportValidity","StreamData","publicKey","toBase58","_createStream","success","streamCreated","getMinimumBalanceForRentExemption","fee","LAMPORTS_PER_SOL","onSubmit","CLUSTER_MAINNET","Account","wallet","airdropTxSignature","setAirdropTxSignature","isMainnet","requestAirdrop","signature","toast","confirmTransaction","then","result","err","error","disconnect","setCluster","SelectCluster","CLUSTER_DEVNET","CLUSTER_TESTNET","CLUSTER_LOCAL","hidden","Component","EmptyStreams","StreamsContainer","_withdrawStream","getBalance","newBalance","getAccountInfo","PublicKey","streamData","getDecodedAccountData","oldBalance","_cancelStream","newWithdrawn","canceled_at","skipPrompt","_swal","newStreams","streamID","window","location","hash","substring","hasOwnProperty","pk","message","temp","stringify","Object","keys","length","entries","sort","stream1","map","withdrawStream","cancelStream","Main","NotConnected","height","frameBorder","allowFullScreen","mainComponent","connect","App","on","console","log","info","logo","hideProgressBar","position","limit","ReactDOM","render","StrictMode","clusterUrls","clusterApiUrl","programIds","prompt","createStore","devtools","get","programId","explorerUrl","encodeURIComponent","addEventListener","getState","property","BufferLayout","blob","uint64","DataLayout","struct","buffer","accountData","decode","u64","fromBuffer","starttime","endtime","recipient","getStreamStatus","this","swal","text","buttons","el","createElement","setAttribute","left","body","appendChild","select","execCommand","removeChild","origin","button","content","attributes","innerHTML","clicked","ToastrLink","urlText","nonUrlText","sendTransaction","transaction","network","getRecentBlockhash","recentBlockhash","blockhash","autoClose","feePayer","partialSign","signTransaction","signed","sendRawTransaction","serialize","dismiss","finality","closeOnClick","warn","instruction","getCreateStreamInstruction","tx","Transaction","pdaPub","TransactionInstruction","pubkey","isSigner","isWritable","SystemProgram","encodeInstructionData","layout","u8","u32","nu64","encoded","Buffer","alloc","span","encode","Math","trunc","account_id","getWithdrawStreamInstruction","getCancelStreamInstruction"],"mappings":"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","file":"static/js/main.3db95b78.chunk.js","sourcesContent":["export const STREAMFLOW_ACCOUNT_ID = \"DrFtxPb9F6SxpHHHFiEtSNXE3SZCUNLXMaHS6r8pkoz2\";","export * from './ids';\n\nexport const SOLLET_URL = 'https://www.sollet.io';\nexport const AIRDROP_AMOUNT = 1; // 1 SOL is the cap on the testnet\n\nexport const TX_FINALITY_CONFIRMED = \"confirmed\";\nexport const TX_FINALITY_FINALIZED = \"finalized\";\n\nexport const INSTRUCTION_CREATE_STREAM = 0;\nexport const INSTRUCTION_WITHDRAW_STREAM = 1;\nexport const INSTRUCTION_CANCEL_STREAM = 2;\n\nexport const EXPLORER_TYPE_TX = \"tx\";\nexport const EXPLORER_TYPE_ADDR = \"address\";\n\nexport const DATE_FORMAT = \"yyyy-MM-dd\";\nexport const TIME_FORMAT = \"HH:mm\";\n\nexport const START = \"start\";\nexport const END = \"end\";\n\nexport const STREAM_STATUS_SCHEDULED = \"scheduled\";\nexport const STREAM_STATUS_STREAMING = \"streaming\";\nexport const STREAM_STATUS_COMPLETE = \"complete\";\nexport const STREAM_STATUS_CANCELED = \"canceled\";\n\n//don't forget to update tailwind.config.js to safelist dynamically generated classes\nexport const STREAM_STATUS_COLOR = {\n    [STREAM_STATUS_SCHEDULED]: 'gray', // now < start\n    [STREAM_STATUS_STREAMING]: 'green', // start <= now < end\n    [STREAM_STATUS_COMPLETE]: 'blue', //now >= end;\n    [STREAM_STATUS_CANCELED]: 'red',\n}\n","export default function Recipient(props: { onChange: void, value: string }) {\n    return (\n        <div className=\"col-span-full\">\n            <label htmlFor=\"account\" className=\"block font-medium text-gray-100\">\n                Recipient Account\n            </label>\n            <div className=\"mt-1\">\n                <input\n                    type=\"text\"\n                    name=\"account\"\n                    id=\"account\"\n                    defaultValue={props.value}\n                    onChange={e => props.onChange(e.target.value)}\n                    pattern=\"[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{43,44}\"\n                    className=\"text-white bg-gray-800 border-primary block w-full border-black rounded-md focus:ring-secondary focus:border-secondary\"\n                    placeholder=\"Please double check the address\"\n                    aria-describedby=\"account-description\"\n                    required\n                />\n            </div>\n        </div>\n    )\n}","export default function SelectToken() {\n    return (\n        <div className=\"col-span-2 sm:col-span-1\">\n            <label htmlFor=\"token\" className=\"block font-medium text-gray-100\">\n                Token\n            </label>\n            <select\n                id=\"token\"\n                name=\"token\"\n                className=\"mt-1 text-white bg-gray-800 border-primary block w-full border-black rounded-md focus:ring-secondary focus:border-secondary\"                defaultValue=\"SOL\"\n            >\n                <option>SOL</option>\n                <option disabled>ETH - Coming soon️™</option>\n                <option disabled>BTC - Coming soon™</option>\n                <option disabled>USDC - Coming soon™</option>\n                <option disabled>Other tokens...</option>\n            </select>\n        </div>\n    )\n}\n","import {format} from \"date-fns\";\nimport {createContext, useContext, useState} from \"react\";\nimport {DATE_FORMAT} from \"../constants\";\n\nconst FormContext = createContext(undefined)\n\nexport function FormProvider(props) {\n    const now = new Date();\n\n    const [amount, setAmount] = useState(undefined);\n    const [receiver, setReceiver] = useState(undefined);\n    const [startDate, setStartDate] = useState(format(now, DATE_FORMAT));\n    const [startTime, setStartTime] = useState(\"\");\n    const [endDate, setEndDate] = useState(startDate);\n    const [endTime, setEndTime] = useState(\"\");\n\n    return <FormContext.Provider value={{\n        amount,\n        setAmount,\n        receiver,\n        setReceiver,\n        startDate,\n        setStartDate,\n        startTime,\n        setStartTime,\n        endDate,\n        setEndDate,\n        endTime,\n        setEndTime\n    }}>{props.children}</FormContext.Provider>\n}\n\nexport function useFormContext() {\n    return useContext(FormContext)\n}","import {add, format} from \"date-fns\";\nimport {DATE_FORMAT, END, TIME_FORMAT} from \"../constants\";\nimport {Dispatch, SetStateAction} from \"react\";\nimport {useFormContext} from \"../Contexts/FormContext\";\n\nexport default function DateTime(props: { title: string, date: string, updateDate: Dispatch<SetStateAction<string>>, time: string, updateTime: Dispatch<SetStateAction<string>> }) {\n    const {title, date, updateDate, time, updateTime} = props;\n    const {startDate, startTime} = useFormContext();\n\n    function getMinDate(): string {\n        if (title === END && startDate) {\n            return format(new Date(startDate), DATE_FORMAT);\n        } else {\n            return format(new Date(), DATE_FORMAT);\n        }\n    }\n\n    function initializeTime() {\n        const now = format(add(new Date(), {minutes: 1}), TIME_FORMAT);\n\n        if (title === END) {\n            const minEndDate = startDate ? (new Date(startDate)) : (new Date())\n\n            if (!startDate || !date || date < startDate) {\n                updateDate(format(minEndDate, DATE_FORMAT))\n            }\n\n            if (startDate && startDate === date && time <= startTime) {\n                updateTime(format(add(new Date(startDate + 'T' + startTime), {minutes: 5}), TIME_FORMAT));\n            } else if (!startTime) {\n                updateTime(now)\n            }\n        } else if (!time || time < now) {\n            updateTime(now)\n        }\n    }\n\n    return (\n        <>\n            <div className=\"col-span-3 sm:col-span-1\">\n                <label htmlFor={title}\n                       className=\"block font-medium text-gray-100 capitalize\">{title} Date</label>\n                <div className=\"mt-1\">\n                    <input type=\"date\" name={title} id={title}\n                           value={date}\n                           min={getMinDate()}\n                           max={format(add(new Date(), {years: 1}), DATE_FORMAT)}\n                           onFocus={initializeTime}\n                           onClick={initializeTime}\n                           onChange={e => updateDate(e.target.value)}\n                           className=\"text-white bg-gray-800 border-primary block w-full border-black rounded-md focus:ring-secondary focus:border-secondary\"\n                           placeholder=\"\" aria-describedby={title + `-description`} required/>\n                </div>\n            </div>\n            <div className=\"col-span-2 sm:col-span-1\">\n                <label htmlFor={title + `_time`}\n                       className=\"block font-medium text-gray-100 capitalize\">{title} time</label>\n                <div className=\"mt-1\">\n                    <input type=\"time\" name={title + `_time`} id={title + `_time`}\n                           value={time}\n                           onFocus={initializeTime}\n                           onClick={initializeTime}\n                           onChange={e => updateTime(e.target.value)}\n                           className=\"text-white bg-gray-800 border-primary block w-full border-black rounded-md focus:ring-secondary focus:border-secondary\"\n                           placeholder=\"\" aria-describedby={title + `_time-description`} required/>\n                </div>\n            </div>\n        </>\n    )\n}","export default function Amount(props: { onChange: void, max: number, value: number }) {\n    return (\n        <div className=\"col-span-3 sm:col-span-1\">\n            <label htmlFor=\"amount\" className=\"block font-medium text-gray-100\">\n                Amount\n            </label>\n            <div className=\"mt-1\">\n                <input\n                    step=\"any\"\n                    autoFocus={true}\n                    type=\"number\"\n                    name=\"amount\"\n                    id=\"amount\"\n                    defaultValue={props.value}\n                    onChange={e => props.onChange(e.target.value)}\n                    className=\"text-white bg-gray-800 border-primary block w-full border-black rounded-md focus:ring-secondary focus:border-secondary\"\n                    min={0}\n                    max={props.max || Number.MAX_SAFE_INTEGER}\n                    placeholder=\"0.00\"\n                    aria-describedby=\"amount-description\"\n                    required={true}\n                />\n            </div>\n        </div>\n    )\n}\n","export default function Curtain(props: { visible: boolean }) {\n    return (\n        <div className={`fixed top-0 bottom-0 left-0 right-0 bg-gray-900 opacity-90 z-10 ${props.visible ? \"block\" : \"hidden\"}`}>\n            <div className=\"loader\"> </div>\n        </div>\n    )\n}","export default function Badge(props: { type: string, color: string }) {\n    const {type, color } = props;\n    return <div className=\"inline\">\n        <span\n            className={`align-top px-2.5 py-0.5 rounded-full text-xs font-medium bg-${color}-100 text-${color}-800 capitalize`}>\n            <svg className={`mr-1 -ml-1 inline align-baseline h-2 w-2 text-${color}-400`} fill=\"currentColor\" viewBox=\"0 0 8 8\">\n              <circle cx={4} cy={4} r={3}/>\n            </svg>\n            {type}\n      </span></div>\n}","export default function ActionButton(props: { title: string, action: void, color: string }) {\n    const {title, action, color} = props;\n\n    return (\n        <button onClick={action}\n                className={`rounded-md text-sm bg-${color}-500 hover:bg-${color}-700 active:bg-${color}-900 text-white py-1 px-2`}>\n            {title}\n        </button>\n    )\n}","import {memo} from 'react'\nimport {format, fromUnixTime} from \"date-fns\";\n\nfunction Duration(props: { start: number, end: number }) {\n    return (\n        <dt className=\"col-span-full text-center\">\n            {(format(fromUnixTime(props.start), \"yyyy-MM-dd HH:mm\"))} &ndash; {(format(fromUnixTime(props.end), \"yyyy-MM-dd HH:mm\"))}\n        </dt>\n    )\n}\n\nexport default memo(Duration);","export default function Progress(props: { title: string, value: number, max: number, rtl?: boolean }) {\n    let {title, value, max, rtl} = props;\n    value = Number(value).toFixed(2);\n    max = Number(max).toFixed(2);\n    return (\n        <>\n            <dt>{title}</dt>\n            <div className=\"rounded-sm h-3 bg-gray-900 w-full my-auto\">\n                <div\n                    className={\"max-w-full bg-gradient-to-r from-primary to-secondary rounded-sm h-full \" + (rtl ? \"float-right\" : \"\")}\n                    style={{width: value / max * 100 + \"%\"}}>\n                </div>\n            </div>\n            <label className=\"ml-2 text-right truncate\">◎{value}<small className=\"text-gray-400\">/{max}</small></label>\n        </>\n    )\n}","import Badge from \"./Stream/Badge\";\nimport ActionButton from \"./Stream/ActionButton\";\nimport {getUnixTime} from \"date-fns\";\nimport Duration from \"./Stream/Duration\";\nimport Progress from \"./Stream/Progress\";\nimport {useEffect, useState} from \"react\";\nimport {StreamData, getExplorerLink} from \"../utils/helpers\";\nimport {XIcon} from \"@heroicons/react/outline\";\nimport {\n    EXPLORER_TYPE_ADDR,\n    STREAM_STATUS_CANCELED,\n    STREAM_STATUS_COLOR,\n    STREAM_STATUS_COMPLETE,\n    STREAM_STATUS_SCHEDULED,\n    STREAM_STATUS_STREAMING\n} from \"../constants\";\nimport {Address, Link} from \"./index\";\n\nexport default function Stream(props: { data: StreamData, myAddress: string, id: string, removeStream: void, onStatusUpdate: void, onCancel: void, onWithdraw: void }) {\n    const {start, end, withdrawn, amount, receiver, sender, status} = props.data;\n    const {myAddress, removeStream, onStatusUpdate, onCancel, onWithdraw, id} = props;\n\n    const color = STREAM_STATUS_COLOR[status];\n\n    const [streamed, setStreamed] = useState(getStreamed(start, end, amount))\n    const [available, setAvailable] = useState(streamed - withdrawn);\n\n    const showWithdraw = ((status === STREAM_STATUS_STREAMING || (status === STREAM_STATUS_COMPLETE && withdrawn < amount)) && myAddress === receiver);\n    const showCancel = (status === STREAM_STATUS_STREAMING || status === STREAM_STATUS_SCHEDULED) && myAddress === sender\n    useEffect(() => {\n        const interval = setInterval(() => {\n            setStreamed(getStreamed(start, end, amount));\n            setAvailable(streamed - withdrawn);\n            const tmpStatus = updateStatus(status, start, end);\n            if (tmpStatus !== status) {\n                onStatusUpdate(tmpStatus)\n            }\n        }, 1000)\n        return () => clearInterval(interval);\n    });\n\n    return (\n        <dl className={`text-white my-4 grid gap-y-4 gap-x-2 grid-cols-3 p-4 bg-${color}-300 bg-opacity-10 hover:bg-opacity-20 shadow rounded-lg`}>\n            <div className=\"col-span-full\">\n                <Badge className=\"inline\" type={status} color={color}/>\n                <button onClick={removeStream}\n                        className={`p-1.5 h-6 w-6 float-right align-top rounded-sm hover:bg-${color}-100 focus:outline-none focus:ring-1`}>\n                    <XIcon className=\"float-right w-3 h-3\"/>\n                </button>\n            </div>\n            <Duration start={start} end={end}/>\n            <Link url={getExplorerLink(EXPLORER_TYPE_ADDR, id)} title={\"ID\"}/>\n            <Address address={id} className=\"col-span-2 text-sm text-gray-400\"/>\n            <Link url={getExplorerLink(EXPLORER_TYPE_ADDR, receiver)} title={\"Recipient\"}/>\n            <Address address={receiver} className=\"col-span-2 text-sm text-gray-400\"/>\n            <Progress title=\"Withdrawn\" value={withdrawn} max={amount}/>\n            {status === STREAM_STATUS_CANCELED &&\n            <Progress title=\"Returned\" value={amount - withdrawn} max={amount} rtl={true}/>}\n            {status !== STREAM_STATUS_CANCELED &&\n            <>\n                <Progress title=\"Streamed\" value={streamed} max={amount}/>\n                {showWithdraw &&\n                (<>\n                    <dt>Available<br/>\n                        <sup className=\"text-xs text-gray-300 align-top\">for withdrawal</sup></dt>\n                    <dd className=\"col-span-2\">◎{available.toFixed(2)}</dd>\n                    <ActionButton title=\"Withdraw\" action={onWithdraw}\n                                  color={STREAM_STATUS_COLOR[STREAM_STATUS_STREAMING]}/>\n                </>)}\n                {showCancel && <ActionButton title={\"Cancel\"} action={onCancel}\n                                             color={STREAM_STATUS_COLOR[STREAM_STATUS_CANCELED]}/>}\n            </>}\n        </dl>\n    )\n}\n\nexport function getStreamed(start: number, end: number, amount: number, timestamp?: number) {\n    timestamp = timestamp || getUnixTime(new Date());\n\n    if (timestamp < start) return 0\n    if (timestamp > end) return amount;\n\n    return (timestamp - start) / (end - start) * amount;\n}\n\nfunction updateStatus(status: string, start: number, end: number) {\n    const now = getUnixTime(new Date());\n    if (status === STREAM_STATUS_SCHEDULED && now >= start) {\n        return STREAM_STATUS_STREAMING;\n    } else if (status === STREAM_STATUS_STREAMING && now >= end) {\n        return STREAM_STATUS_COMPLETE;\n    } else {\n        return status;\n    }\n}\n","import {Link} from \"./index\";\n\nexport default function Footer() {\n    return (<footer className=\"mt-40 mb-4 text-center text-sm font-mono text-gray-400\">\n        <img src=\"https://solana.com/branding/horizontal/logo-horizontal-gradient-dark.png\"\n             className=\"w-40 mx-auto my-2\" alt=\"Solana logo\" loading=\"lazy\"/>\n        <small>\n            <Link url=\"https://streamflow.finance\" title=\"StreamFlow\" hideIcon={true}/>\n            @ <Link url=\"https://solana.com/solanaszn\" title=\"SolanaSZN\" hideIcon={true}/>\n        </small>\n    </footer>)\n}","export default function Logo(props: {src: string}){\n    return (\n        <div className=\"mb-8 text-white\">\n            <img src={props.src} alt=\"StreamFlow Finance logo\" className=\"w-24 mx-auto\"/>\n            <h1 className=\"text-6xl text-center\">Stream<strong>Flow</strong></h1>\n        </div>\n    )\n}","export default function ButtonPrimary({children, className, ...rest}) {\n    const baseClasses = \"block mx-auto px-8 py-4 bg-gradient-to-br from-primary via-primary to-secondary border-transparent font-medium rounded shadow-sm text-white hover:opacity-90 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary \"\n    return (\n        <button className={baseClasses + className} {...rest}>\n            {children}\n        </button>\n    )\n}\n","import {ExternalLinkIcon} from \"@heroicons/react/outline\";\n\nexport default function Link(props: { url: string, title?: string, className?: string, hideIcon?: boolean}) {\n    const {url, title, className, hideIcon} = props;\n    const icon = hideIcon || <sup><ExternalLinkIcon className=\"w-3 h-3 inline\"/></sup>\n\n    return (\n        <strong className={\"text-gray-300 hover:text-white \" + className}>\n            <a href={url} target=\"_blank\" rel=\"noopener noreferrer\">\n                {title || url} {icon}\n            </a>\n        </strong>\n    )\n}","import {copyToClipboard} from \"../utils/helpers\";\nimport {DuplicateIcon, CheckIcon} from \"@heroicons/react/outline\";\nimport {useState} from \"react\";\n\nexport default function Address(props: { address: string, className: string }) {\n    const {address, className} = props;\n    const iconClassName = \"h-4 inline mr-1 cursor-pointer hover:opacity-80 align-text-bottom \";\n    const [copied, setCopied] = useState(false)\n\n    function copy() {\n        copyToClipboard(address);\n        setCopied(true);\n        setTimeout(() => {\n            setCopied(false)\n        }, 1000)\n    }\n\n    return (\n        <span className={\"block truncate \" + className}>\n            {copied\n                ? (<span className=\"text-green-300 mr-1\"><CheckIcon className={iconClassName}/><small>Copied!</small></span>)\n                : <DuplicateIcon className={iconClassName} onClick={copy}/>}\n            {address}</span>\n    )\n}\n\n\n","import create from \"zustand\";\n\nconst useBalanceStore = create(set => ({\n    balance: 0,\n    setBalance: balance => set({balance})\n}))\n\nexport default useBalanceStore","import {createContext, useContext, useMemo, useState} from \"react\";\nimport {SOLLET_URL} from \"../constants\";\nimport {Connection} from \"@solana/web3.js\";\nimport Wallet from \"@project-serum/sol-wallet-adapter\";\nimport useNetworkStore from \"../Stores/NetworkStore\"\n\nconst NetworkContext = createContext(undefined)\n\nconst networkStore = state => state.clusterUrl()\n\nexport function NetworkProvider(props) {\n    const cluster = useNetworkStore(networkStore)\n    const [providerUrl,] = useState(SOLLET_URL);\n    const [selectedWallet, setSelectedWallet] = useState(undefined);\n    const [connected, setConnected] = useState(false);\n\n    const connection = useMemo(() => new Connection(cluster), [cluster]);\n    const urlWallet = useMemo(() => new Wallet(providerUrl, cluster), [providerUrl, cluster]);\n\n    return <NetworkContext.Provider value={{\n        providerUrl,\n        selectedWallet,\n        setSelectedWallet,\n        connected,\n        setConnected,\n        connection,\n        urlWallet\n    }}>{props.children}</NetworkContext.Provider>\n\n}\n\nexport function useNetworkContext(){\n    return useContext(NetworkContext)\n}\n","import create from 'zustand'\n\nconst useStreamStore = create(set => ({\n    streams: localStorage.streams ? JSON.parse(localStorage.streams) : {},\n    setStreams: streams => set({streams})\n}))\n\nexport default useStreamStore","import {Amount, ButtonPrimary, DateTime, Recipient, SelectToken,} from \"./index\";\nimport {useFormContext} from \"../Contexts/FormContext\";\nimport {getUnixTime} from \"date-fns\";\nimport {streamCreated, StreamData} from \"../utils/helpers\";\nimport {_createStream} from \"../Actions\";\nimport useBalanceStore from \"../Stores/BalanceStore\";\nimport {Keypair, LAMPORTS_PER_SOL} from \"@solana/web3.js\";\nimport {Dispatch, SetStateAction} from \"react\";\nimport {useNetworkContext} from \"../Contexts/NetworkContext\";\nimport useStreamStore from \"../Stores/StreamsStore\";\nimport useNetworkStore from \"../Stores/NetworkStore\"\nimport {START, END} from \"../constants\";\n\nconst networkStore = state => state.cluster\n\nexport default function CreateStreamForm({\n                                             loading,\n                                             setLoading\n                                         }: { loading: boolean, setLoading: Dispatch<SetStateAction<boolean>> }) {\n    const pda = Keypair.generate();\n    const {\n        amount,\n        setAmount,\n        receiver,\n        setReceiver,\n        startDate,\n        setStartDate,\n        startTime,\n        setStartTime,\n        endDate,\n        setEndDate,\n        endTime,\n        setEndTime\n    } = useFormContext()\n\n    const {\n        connection, selectedWallet\n    } = useNetworkContext();\n\n    const cluster = useNetworkStore(networkStore)\n\n    const {balance, setBalance} = useBalanceStore()\n    const {streams, setStreams} = useStreamStore()\n\n    function validate(element) {\n        const {name, value} = element;\n        let start;\n        let msg = \"\";\n        switch (name) {\n            case \"start\":\n                msg = new Date(value) < new Date((new Date()).toDateString()) ? \"Cannot start the stream in the past.\" : \"\";\n                break;\n            case \"start_time\":\n                start = new Date(startDate + \"T\" + value);\n                msg = start < new Date() ? \"Cannot start the stream in the past.\" : \"\";\n                break;\n            case \"end\":\n                msg = new Date(value) < new Date(startDate) ? \"Umm... end date before the start date?\" : \"\";\n                break;\n            case \"end_time\":\n                start = new Date(startDate + \"T\" + startTime);\n                const end = new Date(endDate + \"T\" + value);\n                msg = end < start ? \"Err... end time before the start time?\" : \"\";\n                break;\n            default:\n        }\n        element.setCustomValidity(msg);\n    }\n\n    async function createStream() {\n        const form = document.getElementById('form');\n        for (const elem of form.elements) {\n            validate(elem);\n        }\n\n        if (!form.checkValidity()) {\n            form.reportValidity();\n            return false;\n        }\n\n        const start = getUnixTime(new Date(startDate + \"T\" + startTime));\n        let end = getUnixTime(new Date(endDate + \"T\" + endTime));\n\n        // Make sure that end time is always AFTER start time\n        if (end === start) {\n            end = start + 1;\n        }\n\n        setLoading(true);\n        const data = new StreamData(selectedWallet.publicKey.toBase58(), receiver, amount, start, end);\n        const success = await _createStream(data, connection, selectedWallet, cluster, pda)\n        setLoading(false);\n\n        if (success) {\n            streamCreated(pda.publicKey.toBase58())\n            const fee = await connection.getMinimumBalanceForRentExemption(96)\n            setBalance(balance - amount - fee / LAMPORTS_PER_SOL);\n            setStreams({...streams, [pda.publicKey.toBase58()]: data})\n        }\n    }\n\n    return (\n        <form onSubmit={createStream} id=\"form\">\n            <div className=\"my-4 grid gap-4 grid-cols-5 sm:grid-cols-2\">\n                <Amount onChange={setAmount} value={amount} max={balance}/>\n                <SelectToken/>\n                <Recipient onChange={setReceiver} value={receiver}/>\n                <DateTime\n                    title={START}\n                    date={startDate}\n                    updateDate={setStartDate}\n                    time={startTime}\n                    updateTime={setStartTime}\n                />\n                <DateTime\n                    title={END}\n                    date={endDate}\n                    updateDate={setEndDate}\n                    time={endTime}\n                    updateTime={setEndTime}\n                />\n            </div>\n            <ButtonPrimary\n                className=\"font-bold text-2xl my-5\"\n                onClick={createStream}\n                type=\"button\"\n                disabled={loading}\n            >\n                Stream!\n            </ButtonPrimary>\n        </form>\n    );\n}\n","import {Address, ButtonPrimary, Link} from \"./index\";\nimport {getExplorerLink} from \"../utils/helpers\";\nimport Wallet from \"@project-serum/sol-wallet-adapter\";\nimport {AIRDROP_AMOUNT, TX_FINALITY_CONFIRMED} from \"../constants\";\nimport {toast} from \"react-toastify\";\nimport {LAMPORTS_PER_SOL} from \"@solana/web3.js\";\nimport {Dispatch, SetStateAction, useEffect, useState} from \"react\";\nimport {useNetworkContext} from \"../Contexts/NetworkContext\";\nimport useBalanceStore from \"../Stores/BalanceStore\";\nimport useNetworkStore, { CLUSTER_MAINNET } from \"../Stores/NetworkStore\"\n\nconst networkStore = state => state.cluster === CLUSTER_MAINNET\n\nexport default function Account({\n                                    wallet,\n                                    loading,\n                                    setLoading\n                                }: { wallet: Wallet, loading: boolean, setLoading: Dispatch<SetStateAction<boolean>> }) {\n\n    const [airdropTxSignature, setAirdropTxSignature] = useState(undefined)\n    const {balance, setBalance} = useBalanceStore()\n    const {connection, selectedWallet} = useNetworkContext()\n    const isMainnet = useNetworkStore(networkStore)\n\n    useEffect(() => {\n        if (airdropTxSignature) {\n            connection.confirmTransaction(airdropTxSignature, TX_FINALITY_CONFIRMED).then(\n                result => {\n                    if (result.value.err) {\n                        toast.error('Airdrop failed!')\n                    } else {\n                        setBalance(balance + AIRDROP_AMOUNT)\n                        toast.success(\"Airdrop confirmed. Balance updated!\")\n                    }\n                }\n            )\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [airdropTxSignature])\n\n    async function requestAirdrop() {\n        setLoading(true);\n        const signature = await connection.requestAirdrop(selectedWallet.publicKey, AIRDROP_AMOUNT * LAMPORTS_PER_SOL);\n        setAirdropTxSignature(signature);\n        setLoading(false);\n        toast.success(\"Airdrop requested!\")\n    }\n\n    return (\n        <>\n            <div className=\"mb-4 text-white\">\n                <Link url={getExplorerLink('address', wallet.publicKey.toBase58())}\n                      title=\"My Wallet Address\"/>\n                <Address address={wallet.publicKey.toBase58()} className=\"block truncate\"/>\n            </div>\n            <div className=\"mb-4 clearfix text-white\">\n                <strong className=\"block\">Balance</strong>\n                <span>◎{Number(balance).toFixed(4)}</span>\n                <button type=\"button\" onClick={() => wallet.disconnect()}\n                        className=\"float-right items-center px-2.5 py-1.5 shadow-sm text-xs  font-medium rounded bg-gray-500 hover:bg-gray-400 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary\">\n                    Disconnect\n                </button>\n                <ButtonPrimary\n                    type=\"button\" onClick={requestAirdrop}\n                    className={\"float-right mr-2 px-2.5 py-1.5 text-xs my-0 rounded active:bg-white\" + (isMainnet ? \" hidden\" : \"\")}\n                    disabled={loading}\n                >\n                    Airdrop\n                </ButtonPrimary>\n            </div>\n        </>\n    )\n}\n","import {CLUSTER_LOCAL, CLUSTER_DEVNET, CLUSTER_TESTNET, CLUSTER_MAINNET} from '../Stores/NetworkStore'\nimport useNetworkStore from \"../Stores/NetworkStore\"\n\nconst networkStore = state => [state.cluster, state.setCluster]\n\nexport default function SelectCluster() {\n    const [cluster, setCluster] = useNetworkStore(networkStore)\n    return (\n        <select\n            id=\"cluster\"\n            name=\"cluster\"\n            className=\"mt-1 text-white bg-gray-800 border-primary block w-full border-black rounded-md focus:ring-secondary focus:border-secondary\"\n            defaultValue={cluster}\n            onChange={e => setCluster(e.target.value)}\n        >\n            <option value={CLUSTER_MAINNET} disabled={true}>{CLUSTER_MAINNET} — soon™</option>\n            <option value={CLUSTER_DEVNET}>{CLUSTER_DEVNET}</option>\n            <option value={CLUSTER_TESTNET}>{CLUSTER_TESTNET}</option>\n            {/* handy for developers, but not needed for the end user */}\n            <option value={CLUSTER_LOCAL} hidden={true}>{CLUSTER_LOCAL}</option>\n        </select>\n    )\n}\n","import {XIcon} from '@heroicons/react/outline'\nimport {Component} from \"react\";\n\n//could be functional component, but we decided to let it manage its own state (open/close)\nexport default class Banner extends Component {\n    state = {\n        hidden: false\n    }\n\n    render() {\n        return (\n            <div className={`relative bg-primary ${this.state.hidden && \"hidden\"}`}>\n                <div className=\"max-w-7xl mx-auto py-3 px-3 sm:px-6 lg:px-8\">\n                    <div className=\"pr-16 sm:text-center sm:px-16\">\n                        <p className=\"font-small text-white\">\n                            <b>{this.props.title}</b>\n                            &nbsp;\n                            <span className=\"hidden lg:inline\">{this.props.message}</span>\n                        </p>\n                    </div>\n                    <div\n                        className=\"absolute inset-y-0 right-0 pt-1 pr-1 flex items-start sm:pt-1 sm:pr-2 sm:items-start\">\n                        <button type=\"button\" onClick={() => this.setState({hidden: true})}\n                                className=\"flex p-2 rounded-md hover:bg-primary focus:outline-none focus:ring-2 focus:ring-white\"\n                        >\n                            <span className=\"sr-only\">Dismiss</span>\n                            <XIcon className=\"h-6 w-6 text-white\"/>\n                        </button>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}","export default function EmptyStreams() {\n    return (<div className=\"mx-auto my-10 text-white text-center\">\n        <span>Your streams will appear here.</span>\n        <br/>\n        <span>Start streaming!</span>\n    </div>)\n}","import EmptyStreams from \"../Components/EmptyStreams\";\nimport {_swal, getDecodedAccountData} from \"../utils/helpers\";\nimport {getStreamed, Stream} from \"../Components\";\nimport {_cancelStream, _withdrawStream} from \"../Actions\";\nimport {getUnixTime} from \"date-fns\";\nimport {STREAM_STATUS_CANCELED, TX_FINALITY_FINALIZED} from \"../constants\";\nimport {useNetworkContext} from \"../Contexts/NetworkContext\";\nimport useBalanceStore from \"../Stores/BalanceStore\";\nimport useStreamStore from \"../Stores/StreamsStore\";\nimport {LAMPORTS_PER_SOL, PublicKey} from \"@solana/web3.js\";\nimport {toast} from \"react-toastify\";\nimport {useEffect} from \"react\";\nimport useNetworkStore from \"../Stores/NetworkStore\"\n\nconst networkStore = state => state.cluster\n\nexport default function StreamsContainer() {\n\n    const {selectedWallet, connection} = useNetworkContext()\n    const cluster = useNetworkStore(networkStore)\n    const {balance, setBalance} = useBalanceStore()\n    const [streams, setStreams] = useStreamStore(state => [state.streams, state.setStreams])\n\n    //componentWillMount\n    useEffect(() => {\n        const newStreams = {...streams}\n        const streamID = window.location.hash.substring(1);\n\n        if (streamID) {\n            try {\n                new PublicKey(streamID);\n                newStreams[streamID] = undefined; // We're setting the data few lines below\n            } catch (e) {\n                toast.error(\"Stream doesn't exist. Please double check with the sender.\")\n            }\n        }\n\n        for (const id in newStreams) {\n            if (newStreams.hasOwnProperty(id)) {\n                //first, the cleanup\n                let pk = undefined\n                try {\n                    pk = new PublicKey(id);\n                } catch (e) {\n                    toast.error(e.message + id)\n                    //removeStream(id, true);\n                }\n\n                if (pk) {\n                    connection.getAccountInfo(new PublicKey(id)).then(result => {\n                        const temp = {...streams}\n                        if (result?.data) {\n                            temp[id] = getDecodedAccountData(result.data);\n                        } else {\n                            if (id === streamID) {\n                                toast.error(\"Stream doesn't exist. Please double check with the sender.\")\n                            }\n                            delete temp[id]\n                        }\n                        setStreams(temp)\n                    })\n                }\n            }\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    useEffect(() => {\n        localStorage.streams = JSON.stringify(streams);\n    }, [streams])\n\n    async function withdrawStream(id: string) {\n        const {start, end, amount} = streams[id];\n        const success = await _withdrawStream(id, streams[id], connection, selectedWallet, cluster)\n\n        if (success) {\n            //optimistic\n            const withdrawn = getStreamed(start, end, amount)\n            setBalance(balance + withdrawn)\n            setStreams({...streams, [id]: {...streams[id], withdrawn}})\n\n            //final\n            const newBalance = (await connection.getBalance(selectedWallet.publicKey, TX_FINALITY_FINALIZED)) / LAMPORTS_PER_SOL;\n            const streamData = await connection.getAccountInfo(new PublicKey(id))\n            setBalance(newBalance)\n            setStreams({...streams, [id]: getDecodedAccountData(streamData.data)})\n        }\n    }\n\n    async function cancelStream(id: string) {\n        const {amount, withdrawn} = streams[id];\n        const now = new Date();\n        const oldBalance = balance;\n        const success = await _cancelStream(id, streams[id], connection, selectedWallet, cluster)\n        if (success) {\n            const newBalance = (await connection.getBalance(selectedWallet.publicKey)) / LAMPORTS_PER_SOL;\n            const newWithdrawn = amount - (newBalance - oldBalance);\n            setBalance(balance + amount - withdrawn)\n            setStreams({\n                ...streams,\n                [id]: {\n                    ...streams[id],\n                    withdrawn: newWithdrawn,\n                    canceled_at: getUnixTime(now),\n                    status: STREAM_STATUS_CANCELED\n                }\n            })\n        }\n    }\n\n    async function removeStream(id: string, skipPrompt?: boolean) {\n        if (!skipPrompt && await _swal()) {\n            const newStreams = {...streams}\n            delete newStreams[id];\n            setStreams(newStreams)\n        }\n    }\n\n    return <div>\n        <strong className=\"text-white text-center text-2xl block\">My Streams</strong>\n        {Object.keys(streams).length > 0 ? (\n            Object.entries(streams)\n                .sort(([, stream1], [, stream2]) => stream2.start - stream1.start)\n                .map(([id, data]) => (\n                    <Stream key={id} onStatusUpdate={(status) => setStreams({\n                        ...streams,\n                        [id]: {...streams[id], status}\n                    })}\n                            onWithdraw={() => withdrawStream(id)} onCancel={() => cancelStream(id)}\n                            id={id} data={data} myAddress={selectedWallet.publicKey.toBase58()}\n                            removeStream={() => removeStream(id)}/>\n                ))\n        ) : <EmptyStreams/>}\n    </div>\n}\n","import {useState} from \"react\";\nimport {Account, CreateStreamForm, Curtain} from \"../Components\";\nimport StreamsContainer from \"../Containers/StreamsContainer\";\nimport {useNetworkContext} from \"../Contexts/NetworkContext\";\n\nexport default function Main() {\n    const [loading, setLoading] = useState(false)\n    const {selectedWallet} = useNetworkContext()\n\n    return (\n        <div className=\"mx-auto grid grid-cols-1 gap-16 max-w-lg xl:grid-cols-2 xl:max-w-5xl\">\n            <div className=\"mb-8\">\n                <Curtain visible={loading}/>\n                <Account wallet={selectedWallet} loading={loading} setLoading={setLoading}/>\n                <hr/>\n                <CreateStreamForm loading={loading} setLoading={setLoading}/>\n            </div>\n            <StreamsContainer/>\n        </div>\n    )\n}","import ButtonPrimary from \"../Components/ButtonPrimary\";\n\nexport default function NotConnected(props: { action: () => * }) {\n    return <div className=\"max-w-md mx-auto\">\n        <iframe width=\"100%\" height={270} src=\"https://www.youtube-nocookie.com/embed/7HWzcxu-De0\"\n                title=\"StreamFlow Finance Demo\" frameBorder=\"0\"\n                allowFullScreen>&nbsp;</iframe>\n        <ButtonPrimary className=\"font-bold text-2xl my-5\"\n                       type=\"button\"\n                       onClick={props.action}>\n            Connect\n        </ButtonPrimary>\n    </div>;\n}\n","export default __webpack_public_path__ + \"static/media/logo.c4294b7c.png\";","import {useEffect} from \"react\";\nimport {LAMPORTS_PER_SOL} from \"@solana/web3.js\";\nimport {toast, ToastContainer} from \"react-toastify\";\nimport {Main, NotConnected} from \"./Pages\";\nimport {Footer, Logo} from \"./Components\";\nimport {useNetworkContext} from \"./Contexts/NetworkContext\";\nimport useBalanceStore from \"./Stores/BalanceStore\";\nimport SelectCluster from \"./Components/SelectCluster\";\nimport logo from './logo.png'\nimport 'react-toastify/dist/ReactToastify.css';\n\nconst mainComponent = (connected: boolean, selectedWallet: ?Wallet) => {\n    if (connected) {\n        return <Main/>\n    }\n    else {\n        return <>\n            <div className=\"sm:absolute top-0 right-0 p-4\"><SelectCluster/></div>\n            <NotConnected action={() => selectedWallet.connect()}/>\n        </>\n    }\n}\n\nfunction App() {\n    const {\n        selectedWallet,\n        setSelectedWallet,\n        urlWallet,\n        connected,\n        setConnected,\n        connection,\n    } = useNetworkContext()\n\n    const {setBalance} = useBalanceStore()\n\n    useEffect(() => {\n        if (selectedWallet) {\n            selectedWallet.on('connect', () => {\n                setConnected(true);\n                connection.getBalance(selectedWallet.publicKey)\n                    .then(result => setBalance(result / LAMPORTS_PER_SOL));\n             connection.getMinimumBalanceForRentExemption(96).then(result => console.log('fee', result))\n                toast.success('Connected to wallet!');\n            });\n            selectedWallet.on('disconnect', () => {\n                setConnected(false);\n                // setSelectedWallet(undefined);\n                toast.info('Disconnected from wallet');\n            });\n            //selectedWallet.connect();\n            return () => {\n                selectedWallet.disconnect();\n            };\n        }\n    }, [connection, selectedWallet, setBalance, setConnected]);\n\n    useEffect(() => {\n        setSelectedWallet(urlWallet)\n    }, [setSelectedWallet, urlWallet])\n\n    return (\n        <div>\n            <div className={\"mx-auto bg-blend-darken px-4 my-4\"}>\n                <Logo src={logo}/>\n                {mainComponent(connected, selectedWallet)}\n            </div>\n            <ToastContainer hideProgressBar position=\"bottom-left\" limit={3}/>\n            <Footer/>\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import reportWebVitals from './reportWebVitals';\nimport {FormProvider} from \"./Contexts/FormContext\";\nimport {NetworkProvider} from \"./Contexts/NetworkContext\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <NetworkProvider>\n            <FormProvider>\n                <App/>\n            </FormProvider>\n        </NetworkProvider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n// reportWebVitals();\n","import createStore from 'zustand'\nimport {clusterApiUrl} from \"@solana/web3.js\"\nimport { devtools } from 'zustand/middleware'\n\nexport const CLUSTER_LOCAL = 'local'\nexport const CLUSTER_DEVNET = 'devnet'\nexport const CLUSTER_TESTNET = 'testnet'\nexport const CLUSTER_MAINNET = 'mainnet-beta'\n\nconst clusterUrls = {\n    [CLUSTER_LOCAL]: () => 'http://127.0.0.1:8899',\n    [CLUSTER_DEVNET]: () => clusterApiUrl(CLUSTER_DEVNET),\n    [CLUSTER_TESTNET]: () => clusterApiUrl(CLUSTER_TESTNET),\n    [CLUSTER_MAINNET]: () => clusterApiUrl(CLUSTER_MAINNET),\n}\n\nconst programIds = {\n    [CLUSTER_LOCAL]: () => prompt(\"Program ID?\"),\n    [CLUSTER_DEVNET]: () => \"2DvvSEde36Ch3B52g9hKWDYbfmJimLpJwVBV9Cknypi4\",\n    [CLUSTER_TESTNET]: () => \"8tQZMH3NWtoiNDYwTpSZ3GVrRKbMVi2S5Xjy6UcbG5rR\",\n    [CLUSTER_MAINNET]: () => null, // TODO: publish the program to mainnet\n}\n\nconst networkStore = createStore(devtools((set: Function, get: Function) => ({\n    // state\n    cluster: localStorage.cluster || CLUSTER_DEVNET,\n    programId: programIds[localStorage.cluster || CLUSTER_DEVNET](),\n\n    // actions\n    clusterUrl: () => clusterUrls[get().cluster](),\n    explorerUrl: () => {\n        const cluster = get().cluster\n        return cluster === CLUSTER_LOCAL ? `custom&customUrl=${encodeURIComponent(get().clusterUrl)}` : cluster\n    },\n    setCluster: (cluster: string) => {\n        const programId = programIds[cluster]()\n        if (programId) {\n            set({cluster, programId})\n        }\n        else {\n            set({cluster: CLUSTER_DEVNET, programId: programIds[CLUSTER_DEVNET]()})\n        }\n    }\n})))\n\nwindow.addEventListener(\"beforeunload\", () => {\n    const state = networkStore.getState()\n    localStorage.cluster = state.cluster\n    localStorage.programId = state.programId\n})\n\nexport default networkStore","import {\n    STREAM_STATUS_CANCELED,\n    STREAM_STATUS_COMPLETE,\n    STREAM_STATUS_SCHEDULED,\n    STREAM_STATUS_STREAMING\n} from \"../constants\";\nimport BufferLayout from \"buffer-layout\";\nimport {LAMPORTS_PER_SOL, PublicKey} from \"@solana/web3.js\";\nimport {u64} from \"@solana/spl-token\";\nimport {getUnixTime} from \"date-fns\";\nimport swal from \"sweetalert\";\nimport {Buffer} from 'buffer/';\nimport useNetworkStore from \"../Stores/NetworkStore\";\n\nexport const publicKey = (property = \"publicKey\"): BufferLayout.Layout => {\n    return BufferLayout.blob(32, property);\n};\n\nexport const uint64 = (property = \"uint64\"): BufferLayout.Layout => {\n    return BufferLayout.blob(8, property);\n};\n\nconst DataLayout = BufferLayout.struct([\n    uint64(\"starttime\"),\n    uint64(\"endtime\"),\n    uint64(\"amount\"),\n    uint64(\"withdrawn\"),\n    publicKey(\"sender\"),\n    publicKey(\"recipient\"),\n]);\n\nexport function getDecodedAccountData(buffer: Buffer) {\n    const accountData = DataLayout.decode(buffer);\n\n    const start = Number(u64.fromBuffer(accountData.starttime));\n    const end = Number(u64.fromBuffer(accountData.endtime));\n    const amount = Number(u64.fromBuffer(accountData.amount)) / LAMPORTS_PER_SOL;\n    const withdrawn = Number(u64.fromBuffer(accountData.withdrawn)) / LAMPORTS_PER_SOL;\n    const sender = (new PublicKey(accountData.sender)).toBase58();\n    const recipient = (new PublicKey(accountData.recipient)).toBase58();\n\n    const status = getStreamStatus(Number(start), Number(end), getUnixTime(new Date())) //in milliseconds\n\n    return new StreamData(sender, recipient, amount, start, end, withdrawn, status);\n}\n\nexport function getExplorerLink(type: string, id: string): string {\n    return `https://explorer.solana.com/${type}/${id}?cluster=${useNetworkStore.getState().explorerUrl()}`;\n}\n\nexport function getStreamStatus(start: number, end: number, now: number) {\n    if (now < start) {\n        return STREAM_STATUS_SCHEDULED\n    } else if (now < end) {\n        return STREAM_STATUS_STREAMING\n    } else {\n        return STREAM_STATUS_COMPLETE\n    }\n}\n\nexport function StreamData(sender: string, receiver: string, amount: number, start: number, end: number, withdrawn?: number, status?: string, canceled_at: number) {\n    this.sender = sender;\n    this.receiver = receiver;\n    this.amount = amount;\n    this.start = start;\n    this.end = end;\n    this.withdrawn = withdrawn || 0;\n    this.status = canceled_at ? STREAM_STATUS_CANCELED : (status || STREAM_STATUS_SCHEDULED);\n    this.canceled_at = canceled_at;\n}\n\nexport function _swal(): Promise {\n    return swal({text: \"Are you sure?\", icon: \"warning\", buttons: true})\n}\n\nexport function copyToClipboard(value): void {\n    const el = document.createElement('textarea');\n    el.value = value;\n    el.setAttribute('readonly', '');\n    el.style.position = 'absolute';\n    el.style.left = '-9999px';\n    document.body.appendChild(el);\n    el.select();\n    document.execCommand('copy');\n    document.body.removeChild(el);\n}\n\nexport function streamCreated(id: string) {\n    const url = window.location.origin + \"#\" + id;\n    swal({\n        button: \"Copy Stream URL\",\n        icon: 'success',\n        title: \"Stream created!\",\n        //sweet alert accepts pure HTML Node, so some wrapping must be done https://sweetalert.js.org/guides/#using-dom-nodes-as-content\n        content:\n            {\n                element: \"a\",\n                attributes: {\n                    className: \"text-primary block truncate max-w-full\",\n                    href: url,\n                    target: \"_blank\",\n                    innerHTML: url\n                }\n            }\n    }).then((clicked) => {\n        if (clicked) {\n            copyToClipboard(url);\n            swal(\"Link copied to clipboard!\", \"Send it to the recipient!\", \"success\")\n        }\n    })\n}\n","import {ExternalLinkIcon} from \"@heroicons/react/outline\";\n\nexport default function ToastrLink(props: { url: string, urlText: string, nonUrlText: string }) {\n    const {url, urlText, nonUrlText} = props;\n    return <span>{nonUrlText}<br/>\n        <a className=\"font-bold\"\n           href={url} rel=\"noopener noreferrer\"\n           target=\"_blank\">{urlText}<ExternalLinkIcon className=\"ml-1 w-4 h-4 inline\"/>\n        </a>\n    </span>\n}","import {toast} from \"react-toastify\";\nimport {Connection, Keypair, Transaction} from \"@solana/web3.js\";\nimport ToastrLink from \"../Components/ToastrLink\";\nimport Wallet from \"@project-serum/sol-wallet-adapter\";\nimport {INSTRUCTION_CREATE_STREAM, TX_FINALITY_CONFIRMED} from \"../constants\";\nimport {getExplorerLink} from \"../utils/helpers\";\n\nexport default async function sendTransaction(type: number, transaction: Transaction, connection: Connection, wallet: Wallet, network?: string, pda?: Keypair) {\n    try {\n        transaction.recentBlockhash = (await connection.getRecentBlockhash()).blockhash;\n        toast.info('Please confirm transaction in your wallet.', {autoClose: 15000});\n        transaction.feePayer = wallet.publicKey;\n\n        if (type === INSTRUCTION_CREATE_STREAM) {\n            transaction.partialSign(pda);\n        }\n\n        const signed = await wallet.signTransaction(transaction);\n        const signature = await connection.sendRawTransaction(signed.serialize());\n        toast.dismiss();\n        toast.info('Submitted transaction. Awaiting confirmation...', {autoClose:15000});\n\n        // can use 'finalized' which gives 100% certainty, but requires much longer waiting.\n        const finality = TX_FINALITY_CONFIRMED\n        await connection.confirmTransaction(signature, finality)\n        const url = getExplorerLink('tx', signature)\n        toast.dismiss();\n        toast.success(\n            <ToastrLink\n                url={url}\n                urlText=\"View on explorer\"\n                nonUrlText={`Transaction ${finality}!` + (finality === TX_FINALITY_CONFIRMED ? \" Please allow it few seconds to finalize.\" : \"\")}\n            />,\n            {autoClose: 20000, closeOnClick: true}\n        )\n        return true;\n    } catch (e) {\n        console.warn(e);\n        //todo log these errors somewhere for our reference\n        toast.error('Error: ' + e.message);\n        return false;\n    }\n}\n","import {\n    Connection,\n    Keypair,\n    LAMPORTS_PER_SOL,\n    PublicKey,\n    SystemProgram,\n    Transaction,\n    TransactionInstruction\n} from \"@solana/web3.js\";\nimport BufferLayout from \"buffer-layout\";\nimport {INSTRUCTION_CREATE_STREAM} from \"../constants\";\nimport {StreamData} from \"../utils/helpers\";\nimport sendTransaction from \"./sendTransaction\";\nimport Wallet from \"@project-serum/sol-wallet-adapter\";\nimport useNetworkStore from \"../Stores/NetworkStore\"\n\nexport default async function _createStream(data: StreamData, connection: Connection, wallet: Wallet, network?: string, pda: Keypair) {\n    const instruction = getCreateStreamInstruction(data, pda.publicKey)\n    const tx = new Transaction({feePayer: wallet.publicKey}).add(instruction);\n    return await sendTransaction(INSTRUCTION_CREATE_STREAM, tx, connection, wallet, network, pda);\n}\n\nfunction getCreateStreamInstruction(data: StreamData, pdaPub: PublicKey): TransactionInstruction {\n    const {sender, receiver} = data;\n\n    return new TransactionInstruction({\n        keys: [{\n            pubkey: new PublicKey(sender),\n            isSigner: true,\n            isWritable: true\n        }, {\n            pubkey: new PublicKey(receiver), //recipient\n            isSigner: false,\n            isWritable: true\n        }, {\n            pubkey: pdaPub, //PDA used for data\n            isSigner: true,\n            isWritable: true\n        }, {\n            pubkey: SystemProgram.programId, //system program required to make a transfer\n            isSigner: false,\n            isWritable: false\n        }],\n        programId: new PublicKey(useNetworkStore.getState().programId),\n        data: encodeInstructionData(data),\n    });\n}\n\n\nfunction encodeInstructionData(data: StreamData) {\n    const {amount, start, end} = data;\n    // Packed as little endian\n    const layout = BufferLayout.struct([\n        BufferLayout.u8(\"instruction\"),\n        BufferLayout.u32(\"start\"),\n        BufferLayout.u32(\"end\"),\n        // N.B. JS Number has 53 significant bits, so numbers larger than\n        // 2^53 can be misrepresented\n        BufferLayout.nu64(\"amount\")\n    ]);\n\n    const encoded = Buffer.alloc(layout.span);\n    layout.encode({\n            instruction: INSTRUCTION_CREATE_STREAM,\n            start: start,\n            end: end,\n            // amount: Number.MAX_SAFE_INTEGER // limited to 2^53 - 1 = 9007199254740991\n            amount: Math.trunc(amount * LAMPORTS_PER_SOL),\n        },\n        encoded\n    );\n\n    // UInt64 alternative is to remove the \"amount\" from layout encoding and\n    // use the following code:\n    // //encoded.writeBigUInt64LE(BigInt(\"18446744073709551615\"), 9)\n\n    return encoded;\n}\n","import BufferLayout from \"buffer-layout\";\nimport {INSTRUCTION_WITHDRAW_STREAM, STREAMFLOW_ACCOUNT_ID} from \"../constants\";\nimport {Connection, PublicKey, SystemProgram, Transaction, TransactionInstruction} from \"@solana/web3.js\";\nimport {StreamData} from \"../utils/helpers\";\nimport sendTransaction from \"./sendTransaction\";\nimport Wallet from \"@project-serum/sol-wallet-adapter\";\nimport useNetworkStore from \"../Stores/NetworkStore\"\n\nexport default async function _withdrawStream(account_id: string, data: StreamData, connection: Connection, wallet: Wallet, network: string) {\n    const {receiver} = data;\n    const instruction = getWithdrawStreamInstruction(account_id, receiver)\n    const tx = new Transaction().add(instruction);\n    return await sendTransaction(INSTRUCTION_WITHDRAW_STREAM, tx, connection, wallet, network)\n}\n\nfunction getWithdrawStreamInstruction(account_id, receiver) {\n\n    return new TransactionInstruction({\n        keys: [{\n            pubkey: new PublicKey(receiver),\n            isSigner: true,\n            isWritable: true\n        }, {\n            pubkey: new PublicKey(account_id),\n            isSigner: false,\n            isWritable: true\n        }, {\n            //needed to transfer the rent only during the final withdrawal transaction\n            pubkey: new PublicKey(STREAMFLOW_ACCOUNT_ID),\n            isSigner: false,\n            isWritable: true\n        }, {\n            pubkey: SystemProgram.programId,\n            isSigner: false,\n            isWritable: false\n        }],\n        programId: new PublicKey(useNetworkStore.getState().programId),\n        data: encodeInstructionData(),\n    });\n\n}\n\nfunction encodeInstructionData() {\n    const layout = BufferLayout.struct([\n        BufferLayout.u8(\"instruction\"),\n        BufferLayout.nu64(\"amount\")\n    ]);\n\n    const data = Buffer.alloc(layout.span);\n    //TODO - allow withdrawal of arbitrary (allowed) amount\n    layout.encode({\n            instruction: INSTRUCTION_WITHDRAW_STREAM,\n            amount: 0,// 0 = whole available amount is withdrawn.\n        },\n        data\n    );\n    return data;\n}\n","import BufferLayout from \"buffer-layout\";\nimport {INSTRUCTION_CANCEL_STREAM} from \"../constants\";\nimport {Connection, PublicKey, SystemProgram, Transaction, TransactionInstruction} from \"@solana/web3.js\";\nimport {StreamData} from \"../utils/helpers\";\nimport sendTransaction from \"./sendTransaction\";\nimport Wallet from \"@project-serum/sol-wallet-adapter\";\nimport useNetworkStore from \"../Stores/NetworkStore\"\n\nexport default async function _cancelStream(account_id: string, data: StreamData, connection: Connection, wallet: Wallet, network: string) {\n    const {sender, receiver} = data;\n    const instruction = getCancelStreamInstruction(account_id, sender, receiver)\n    const tx = new Transaction().add(instruction);\n    return await sendTransaction(INSTRUCTION_CANCEL_STREAM, tx, connection, wallet, network)\n}\n\nfunction getCancelStreamInstruction(account_id, sender, receiver) {\n    return new TransactionInstruction({\n        keys: [{\n            pubkey: new PublicKey(sender),\n            isSigner: true,\n            isWritable: true\n        }, {\n            pubkey: new PublicKey(receiver),\n            isSigner: false,\n            isWritable: true\n        }, {\n            pubkey: new PublicKey(account_id),\n            isSigner: false,\n            isWritable: true\n        }, {\n            pubkey: SystemProgram.programId,\n            isSigner: false,\n            isWritable: false\n        }],\n        programId: new PublicKey(useNetworkStore.getState().programId),\n        data: encodeInstructionData(),\n    });\n\n}\n\nfunction encodeInstructionData() {\n    const layout = BufferLayout.struct([BufferLayout.u8(\"instruction\")]);\n    const data = Buffer.alloc(layout.span);\n\n    layout.encode({instruction: INSTRUCTION_CANCEL_STREAM}, data);\n\n    return data;\n}\n"],"sourceRoot":""}